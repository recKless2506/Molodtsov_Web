// cmd/mainProject/main.go
package main

import (
	"Project/internal/api"
	"Project/internal/app/dsn"
	"Project/internal/app/repository"
	"log"

	"github.com/joho/godotenv"
)

func main() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}

	log.Println("Environment variables loaded successfully")

	repo, err := repository.NewRepository(dsn.FromEnv())
	if err != nil {
		log.Fatalf("failed to create repository: %v", err)
	}

	api.StartServer(repo)
}


package main

import (
	"Project/internal/app/ds"
	"Project/internal/app/dsn"
	"log"

	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ .env
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatalf("Error loading .env file")
	}

	db, err := gorm.Open(postgres.Open(dsn.FromEnv()), &gorm.Config{})
	if err != nil {
		panic("failed to connect database")
	}

	// –ú–∏–≥—Ä–∞—Ü–∏–∏
	err = db.AutoMigrate(
		&ds.HeatersProduct{},
		&ds.HeatersProductRequest{},
		&ds.RequestHeaters{},
		&ds.User{},
	)
	if err != nil {
		panic("cant migrate db")
	}
}


ServiceHost = "0.0.0.0"
ServicePort = 8080

package api

import (
	"Project/internal/app/handler"
	"Project/internal/app/repository"
	"log"

	"github.com/gin-gonic/gin"
)

func StartServer(repo *repository.Repository) {
	h := handler.NewHandler(repo)

	r := gin.Default()
	r.LoadHTMLGlob("templates/*")
	r.Static("/static", "./resources")

	r.GET("/", h.GetCatalog)
	r.GET("/hello", h.GetCatalog)
	r.GET("/heater/:id", h.GetHeaterByID)

	r.GET("/zayavka", h.GetApplications)
	r.POST("/clear-cart", h.ClearCart)

	if err := r.Run(":8001"); err != nil {
		log.Fatalf("server failed to start: %v", err)
	}
}


package config

import (
	"os"

	"github.com/joho/godotenv"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/viper"
)

type Config struct {
	ServiceHost string
	ServicePort int
}

func NewConfig() (*Config, error) {
	var err error

	configName := "config"
	_ = godotenv.Load()
	if os.Getenv("CONFIG_NAME") != "" {
		configName = os.Getenv("CONFIG_NAME")
	}

	viper.SetConfigName(configName)
	viper.SetConfigType("toml")
	viper.AddConfigPath("config")
	viper.AddConfigPath(".")
	viper.WatchConfig()

	err = viper.ReadInConfig()
	if err != nil {
		return nil, err
	}

	cfg := &Config{}           // —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥–∞
	err = viper.Unmarshal(cfg) // —á–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞,
	// –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞—Ç–µ–º –∫–ª–∞–¥–µ–º –≤ –Ω–∞—à—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é cfg
	if err != nil {
		return nil, err
	}

	log.Info("config parsed")

	return cfg, nil
}


package ds

import "gorm.io/gorm"

type HeatersProduct struct {
	gorm.Model         // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç ID, CreatedAt, UpdatedAt, DeletedAt
	Title       string `gorm:"column:title"`
	Type        string `gorm:"column:type"`
	Description string `gorm:"column:description"`
	Power       string `gorm:"column:power"`
	Efficiency  string `gorm:"column:efficiency"`
	Image       string `gorm:"column:image"`
	IsDelete    bool   `gorm:"column:is_delete"`
}

// —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
func (HeatersProduct) TableName() string {
	return "heaters_products"
}


package ds

import (
	"database/sql"

	"gorm.io/gorm"
)

type HeatersProductRequest struct {
	gorm.Model
	Status             string           `gorm:"column:status"`
	CreatorID          uint             `gorm:"column:creator_id"`
	FormationDate      sql.NullTime     `gorm:"column:formation_date"`
	DeleteDate         sql.NullTime     `gorm:"column:delete_date"`
	CompletionDate     sql.NullTime     `gorm:"column:completion_date"`
	RejectionDate      sql.NullTime     `gorm:"column:rejection_date"`
	ModeratorID        uint             `gorm:"column:moderator_id"`
	PlaceSquare        float64          `gorm:"column:place_square"`
	OutsideTemperature float64          `gorm:"column:outside_temperature"`
	InsideTemperature  float64          `gorm:"column:inside_temperature"`
	CarrierVolume      float64          `gorm:"column:carrier_volume"`
	Products           []RequestHeaters `gorm:"foreignKey:HeatersProductRequestID"`
}

// –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
func (HeatersProductRequest) TableName() string {
	return "heaters_product_requests"
}


package ds

import "gorm.io/gorm"

type RequestHeaters struct {
	gorm.Model
	HeatersProductRequestID uint
	HeatersProductID        uint
	Area                    float64

	Product HeatersProduct `gorm:"foreignKey:HeatersProductID"`
}


package ds

import "gorm.io/gorm"

type User struct {
	gorm.Model
	Login       string `gorm:"unique"`
	Password    string
	IsModerator bool
}


// internal/app/dsn/dsn.go
package dsn

import (
	"fmt"
	"os"
)

func FromEnv() string {
	host := os.Getenv("DB_HOST")
	port := os.Getenv("DB_PORT")
	user := os.Getenv("DB_USER")
	pass := os.Getenv("DB_PASS")
	dbname := os.Getenv("DB_NAME")

	return fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		host, port, user, pass, dbname,
	)
}


package handler

import (
	"Project/internal/app/ds"
	"Project/internal/app/repository"
	"log"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

type Handler struct {
	Repository *repository.Repository
}

func NewHandler(r *repository.Repository) *Handler {
	return &Handler{Repository: r}
}

// –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞—Ç–∞–ª–æ–≥)
func (h *Handler) GetCatalog(ctx *gin.Context) {
	products, err := h.Repository.GetHeaterProducts()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", err)
		ctx.String(http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
		return
	}

	// üî• –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ (–∫–æ—Ä–∑–∏–Ω—ã)
	count, err := h.Repository.GetRequestsCount()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫:", err)
		count = 0
	}

	ctx.HTML(http.StatusOK, "catalog.html", gin.H{
		"products":   products,
		"cart_count": count,
	})
}

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
func (h *Handler) GetHeaterByID(ctx *gin.Context) {
	idParam := ctx.Param("id")
	id, err := strconv.Atoi(idParam)
	if err != nil {
		ctx.String(http.StatusBadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
		return
	}

	product, err := h.Repository.GetHeaterProductByID(uint(id))
	if err != nil {
		ctx.String(http.StatusNotFound, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	ctx.HTML(http.StatusOK, "heater.html", gin.H{
		"Product": product,
	})
}

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∑–∞—è–≤–∫–∞–º–∏
func (h *Handler) GetApplications(ctx *gin.Context) {
	requests, err := h.Repository.GetAllRequests()
	if err != nil {
		ctx.String(http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: %v", err)
		return
	}
	ctx.HTML(http.StatusOK, "application.html", gin.H{
		"requests": requests,
	})
}

// –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (POST-–∑–∞–ø—Ä–æ—Å)
func (h *Handler) ClearCart(ctx *gin.Context) {
	if err := h.Repository.DB().
		Model(&ds.HeatersProductRequest{}).
		Where("status = ?", "—á–µ—Ä–Ω–æ–≤–∏–∫").
		Update("status", "—É–¥–∞–ª–µ–Ω").Error; err != nil {
		ctx.String(http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: %v", err)
		return
	}

	// üî• –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫
	ctx.Redirect(http.StatusSeeOther, "/zayavka")
}


package repository

import (
	"Project/internal/app/ds"
	"fmt"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type Repository struct {
	db *gorm.DB
}

func NewRepository(dsn string) (*Repository, error) {
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %w", err)
	}
	return &Repository{db: db}, nil
}

func (r *Repository) DB() *gorm.DB {
	return r.db
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
func (r *Repository) GetHeaterProducts() ([]ds.HeatersProduct, error) {
	var products []ds.HeatersProduct
	if err := r.db.Where("is_delete = ?", false).Find(&products).Error; err != nil {
		return nil, err
	}
	return products, nil
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
func (r *Repository) GetHeaterProductByID(id uint) (*ds.HeatersProduct, error) {
	var product ds.HeatersProduct
	if err := r.db.Where("id = ? AND is_delete = ?", id, false).First(&product).Error; err != nil {
		return nil, err
	}
	return &product, nil
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
func (r *Repository) GetAllRequests() ([]ds.HeatersProductRequest, error) {
	var requests []ds.HeatersProductRequest
	if err := r.db.Preload("Products.Product").
		Where("status != ?", "—É–¥–∞–ª–µ–Ω"). // üî• —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
		Find(&requests).Error; err != nil {
		return nil, err
	}
	return requests, nil
}

// –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–∞ "—É–¥–∞–ª–µ–Ω"
func (r *Repository) ClearRequests() error {
	return r.db.Model(&ds.HeatersProductRequest{}).
		Where("status = ?", "—á–µ—Ä–Ω–æ–≤–∏–∫").
		Update("status", "—É–¥–∞–ª–µ–Ω").Error
}

// üî• –ü–æ–¥—Å—á—ë—Ç –∑–∞—è–≤–æ–∫ (–¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã)
func (r *Repository) GetRequestsCount() (int64, error) {
	var count int64
	if err := r.db.Model(&ds.HeatersProductRequest{}).
		Where("status != ?", "—É–¥–∞–ª–µ–Ω").
		Count(&count).Error; err != nil {
		return 0, err
	}
	return count, nil
}


* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Inter, sans-serif;
  background: white;
}

.header {
  width: 100%;
  height: 120px;
  background: #0567B7;
  display: flex;
  align-items: center;
  padding-left: 20px;
}

.page-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.input-container {
  display: flex;
  justify-content: space-between;
  margin: 30px 0;
  gap: 20px;
}

.input-block {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.input-label {
  font-size: 16px;
  margin-bottom: 5px;
}

.input-field {
  height: 35px;
  padding: 0 10px;
  border-radius: 5px;
  border: 1px solid #7F7A7A;
  font-size: 16px;
}

.cards-container {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.card {
  display: flex;
  background: #0567B7;
  border-radius: 15px;
  overflow: hidden;
  color: white;
  height: 180px;
  position: relative;
}

.card-img {
  width: 180px;
  height: 100%;
  object-fit: cover;
  flex-shrink: 0;
  border-top-left-radius: 15px;
  border-bottom-left-radius: 15px;
}

.card-text-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex: 1;
  padding: 0 20px;
  gap: 20px;
}

.block-title {
  flex: 0 0 200px;
  text-align: center;
}

.block-specs {
  flex: 0 0 180px;
  text-align: right;
}

.block-input {
  flex: 0 0 200px;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
}

.block-input .input-label {
  margin-bottom: 5px;
}

.card-divider {
  width: 1px;
  background: rgba(255,255,255,0.7);
  align-self: stretch;
}

.card-input {
  width: 100%;
  max-width: 120px;  /* —É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ */
  padding: 6px 10px; /* –º–µ–Ω—å—à–µ padding */
  border-radius: 6px;
  border: 1px solid rgba(255,255,255,0.9);
  background: rgba(255,255,255,0.95);
  color: #000;
  font-size: 16px;
  height: 30px; /* —É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ */
}

.card-result {
  position: absolute;
  bottom: 10px;
  left: 200px; /* —Å—Ä–∞–∑—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ */
  padding: 5px 10px;
  background: rgba(255,255,255,0.9);
  color: black;
  border-radius: 6px;
  font-size: 16px;
  font-weight: 500;
  min-width: 80px;
  text-align: center;
}

@media (max-width: 768px) {
  .input-container {
    flex-direction: column;
    gap: 15px;
  }

  .card {
    flex-direction: column;
    height: auto;
  }

  .card-img {
    width: 100%;
    height: 200px;
    border-radius: 15px 15px 0 0;
  }

  .card-text-row {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
    padding: 15px;
  }

  .card-divider {
    width: 100%;
    height: 1px;
    margin: 5px 0;
  }

  .block-input {
    justify-content: flex-start;
  }

  .card-input {
    width: 100%;
    max-width: none;
  }

  .card-result {
    position: relative;
    left: 0;
    margin-top: 10px;
  }
}


/* –û–±—â–∏–µ —Å—Ç–∏–ª–∏ */
body, html {
  margin: 0;
  padding: 0;
  font-family: Inter, sans-serif;
  background: white;
  overflow-x: hidden;
}

/* –•–µ–¥–µ—Ä */
.header {
  width: 100%;
  height: 110px;
  background: #0567B7;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  padding: 0 20px;
  box-sizing: border-box;
}

.header-container {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  width: 100%;
}

/* –õ–æ–≥–æ—Ç–∏–ø */
.logo svg {
  width: 58px;
  height: 58px;
  cursor: pointer;
}

/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–∏—Å–∫–∞ –∏ –∫–æ—Ä–∑–∏–Ω—ã */
.top-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 20px auto;
  padding: 0 20px;
}

/* –ö–æ—Ä–∑–∏–Ω–∞ */
/* –ö–æ—Ä–∑–∏–Ω–∞ */
.cart-container {
  display: flex;
  justify-content: flex-end;
  margin-left: 15px; /* –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –∫–æ—Ä–∑–∏–Ω–∞ –æ—Ç–æ–¥–≤–∏–Ω—É–ª–∞—Å—å –æ—Ç –ø–æ–∏—Å–∫–∞ */
}


.cart-icon {
  position: relative;
  display: flex;
  align-items: center;
  cursor: pointer;
}

.cart-icon svg {
  width: 40px;
  height: 40px;
}

.cart-count {
  position: absolute;
  top: -5px;
  right: -5px;
  width: 28px;
  height: 28px;
  border-radius: 50%;
  background: red;
  color: white;
  font-size: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* –ü–æ–∏—Å–∫ */
.search-bar {
  flex: 1;
}

.search-form {
  display: flex;
  width: 100%;
}

.search-input {
  flex: 1;
  height: 35px;
  border-radius: 20px 0 0 20px;
  border: 1px solid #6D6A6A;
  padding: 0 15px;
  font-size: 14px;
}

.search-button {
  width: 88px;
  height: 35px;
  border-radius: 0 20px 20px 0;
  border: 1px solid #6D6A6A;
  background: white;
  color: #666;
  cursor: pointer;
}

/* –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ */
.products {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  justify-content: flex-start;
  max-width: 1200px;
  margin: 40px auto;
}

.product-card {
  background: #0567B7;
  border-radius: 15px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  overflow: hidden;
  color: white;
  transition: transform 0.2s;
  width: 270px;
  height: 320px;
  flex-shrink: 0;
}

.product-card:hover {
  transform: translateY(-5px);
}

.product-card img {
  width: 100%;
  height: 180px;
  object-fit: cover;
  border-top-left-radius: 15px;
  border-top-right-radius: 15px;
}

.content {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 10px 15px;
  flex-grow: 1;
}

.product-title {
  font-size: 16px;
  font-weight: 500;
  margin: 10px 0 5px 0;
  text-align: center;
}

.product-price {
  font-size: 14px;
  font-weight: 400;
  margin-bottom: 15px;
  text-align: center;
}

.product-button {
  width: 80px;
  height: 25px;
  border-radius: 10px;
  background: white;
  color: black;
  font-size: 12px;
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  cursor: pointer;
  margin: 0 auto 10px auto;
}

.product-button:hover {
  background: #f0f0f0;
}

/* –ê–¥–∞–ø—Ç–∏–≤ */
@media (max-width: 1200px) {
  .products {
    justify-content: center;
    gap: 20px;
  }
}

@media (max-width: 768px) {
  .product-card {
    width: 180px;
    height: 300px;
  }

  .product-card img {
    height: 150px;
  }

  .product-button {
    width: 70px;
    height: 25px;
    font-size: 11px;
  }
}



body, html {
  margin: 0;
  padding: 0;
  font-family: Inter, sans-serif;
  background: white;
}

.header {
  width: 100%;
  height: 110px;
  background: #0567B7;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 20px;
  box-sizing: border-box;
}

.logo svg {
  width: 58px;
  height: 58px;
}

.cart-icon {
  width: 73px;
  height: 73px;
  background: #0567B7;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  cursor: pointer;
}

.cart-icon svg {
  width: 40px;
  height: 40px;
}

.cart-count {
  position: absolute;
  top: -5px;
  right: -5px;
  width: 28px;
  height: 28px;
  border-radius: 50%;
  background: #FF0000;
  color: white;
  font-size: 15px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.product-container {
  display: flex;
  max-width: 1243px;
  margin: 50px auto;
  padding: 20px;
  box-sizing: border-box;
}

.product-image {
  width: 349px;
  height: auto;
  border-right: 1px solid #0567B7;
  padding-right: 20px;
}  

.product-image img {
  width: 100%;
  height: auto;
}

.product-content {
  flex: 1;
  padding-left: 20px;
  box-sizing: border-box;
}

.product-title {
  font-size: 36px;
  color: #0567B7;
  font-weight: 500;
  margin-bottom: 20px;
}

.spec-title {
  font-size: 24px;
  color: #0567B7;
  font-weight: 500;
  margin-top: 30px;
  margin-bottom: 10px;
  border-bottom: 1px solid #0567B7;
  padding-bottom: 5px;
}

.product-description,
.spec-text {
  font-size: 16px;
  color: #0567B7;
  line-height: 1.5;
  white-space: pre-wrap; /* –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ */
  margin-top: 10px;
}

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–ó–∞—è–≤–∫–∏</title>
  <link rel="stylesheet" href="/static/styles/application.css">
  <style>
    .clear-button {
      padding: 10px 20px;
      background: red;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-bottom: 20px;
      font-size: 16px;
    }

    .clear-button:hover {
      background: darkred;
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="logo">
      <a href="/">
        <svg width="58" height="58" viewBox="0 0 58 58" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clip-path="url(#clip0_7_68)">
            <path d="M21.79 55.4667L21.7879 35.8916L34.2624 35.8903L34.2644 55.4654L49.8574 55.4638L49.8547 29.3637L59.2105 29.3627L28.0214 0.00324703L-3.16159 29.3692L6.19423 29.3682L6.19693 55.4683L21.79 55.4667Z" fill="white"/>
          </g>
          <defs>
            <clipPath id="clip0_7_68">
              <rect width="57.6862" height="57.6862" fill="white"/>
            </clipPath>
          </defs>
        </svg>
      </a>
    </div>
  </header>

  <div class="page-container">
    <!-- –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã -->
    <form method="POST" action="/zayavka/clear">
      <button type="submit" class="clear-button">–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</button>
    </form>

    {{range .requests}}
      <!-- –í–µ—Ä—Ö–Ω–∏–µ –ø–æ–ª—è –∑–∞—è–≤–∫–∏ (–æ–¥–∏–Ω —Ä–∞–∑) -->
      <div class="input-container">
        <div class="input-block">
          <div class="input-label">–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è</div>
          <input type="text" class="input-field" value="{{.PlaceSquare}}" readonly>
        </div>
        <div class="input-block">
          <div class="input-label">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞ –ø–æ–º–µ—â–µ–Ω–∏–µ–º</div>
          <input type="text" class="input-field" value="{{.OutsideTemperature}}" readonly>
        </div>
        <div class="input-block">
          <div class="input-label">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏</div>
          <input type="text" class="input-field" value="{{.InsideTemperature}}" readonly>
        </div>
      </div>

      <!-- –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞—è–≤–∫–∏ -->
      <div class="cards-container">
        {{range .Products}}
          <div class="card">
            <img src="{{.Product.Image}}" alt="{{.Product.Title}}" class="card-img">
            <div class="card-text-row">
              <div class="card-text-block block-title">{{.Product.Title}}</div>
              <div class="card-divider"></div>
              <div class="card-text-block block-specs">{{.Product.Power}}</div>
              <div class="card-divider"></div>
              <div class="card-text-block block-input">
                <div class="input-label">–û–±—ä—ë–º –Ω–æ—Å–∏—Ç–µ–ª—è</div>
                <input type="text" class="card-input" value="{{.Area}}" readonly style="color: #000;">
              </div>
            </div>
          </div>
        {{end}}
      </div>

      <hr style="margin:30px 0; border-color:#ccc;">
    {{end}}

    {{if not .requests}}
      <p>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>
    {{end}}
  </div>
</body>
</html>


<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤</title>
  <link rel="stylesheet" href="/static/styles/catalog.css">
</head>
<body>
  <!-- –•–µ–¥–µ—Ä -->
  <header class="header">
    <div class="logo">
      <a href="/">
        <svg width="58" height="58" viewBox="0 0 58 58" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clip-path="url(#clip0)">
            <path d="M21.79 55.4667L21.7879 35.8916L34.2624 35.8903L34.2644 55.4654L49.8574 55.4638L49.8547 29.3637L59.2105 29.3627L28.0214 0.00324703L-3.16159 29.3692L6.19423 29.3682L6.19693 55.4683L21.79 55.4667Z" fill="white"/>
          </g>
          <defs>
            <clipPath id="clip0">
              <rect width="57.6862" height="57.6862" fill="white"/>
            </clipPath>
          </defs>
        </svg>
      </a>
    </div>
  </header>

  <!-- –ü–æ–∏—Å–∫ –∏ –∫–æ—Ä–∑–∏–Ω–∞ -->
  <div class="top-bar">
    <div class="search-bar">
      <form method="GET" action="/hello" class="search-form">
        <input type="text" name="query" class="search-input" placeholder="–ü–æ–∏—Å–∫...">
        <button type="submit" class="search-button">–ù–∞–π—Ç–∏</button>
      </form>
    </div>
    <div class="cart-container">
      {{if gt .cart_count 0}}
        <!-- üî• –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞ -->
        <a href="/zayavka" class="cart-icon">
          <svg viewBox="0 0 24 24">
            <path d="M7 4h-2l-3 9v2h2l3-9zm0 11a2 2 0 1 0 4 0 2 2 0 0 0-4 0zm9-11h-6l-1 2h8v2h-8l1 2h6v2h-6l1 2h6v2h-6l1 2h6v2h-6v-2h-6v-2h6l-1-2h-6v-2h6l-1-2h-6v-2h6l-1-2h6v-2z"/>
          </svg>
          <div class="cart-count">{{.cart_count}}</div>
        </a>
      {{else}}
        <!-- üî• –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ -->
        <div class="cart-icon" style="opacity:0.5; cursor: default; pointer-events:none;">
          <svg viewBox="0 0 24 24">
            <path d="M7 4h-2l-3 9v2h2l3-9zm0 11a2 2 0 1 0 4 0 2 2 0 0 0-4 0zm9-11h-6l-1 2h8v2h-8l1 2h6v2h-6l1 2h6v2h-6l1 2h6v2h-6v-2h-6v-2h6l-1-2h-6v-2h6l-1-2h-6v-2h6l-1-2h6v-2z"/>
          </svg>
          <div class="cart-count">0</div>
        </div>
      {{end}}
    </div>
  </div>

  <!-- –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ -->
  <div class="products">
    {{range .products}}
      <div class="product-card">
        <img src="{{.Image}}" alt="{{.Title}}">
        <div class="content">
          <div class="product-title">{{.Title}}</div>
          <div class="product-specs">{{.Efficiency}}</div>
          <div style="margin-top:auto; width:100%; display:flex; justify-content:center;">
            <a href="/heater/{{.ID}}" class="product-button">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
          </div>
        </div>
      </div>
    {{end}}
  </div>
</body>
</html>


<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{.Product.Title}}</title>
  <link rel="stylesheet" href="/static/styles/heater.css">
</head>
<body>
  <!-- –•–µ–¥–µ—Ä –±–µ–∑ –∫–æ—Ä–∑–∏–Ω—ã -->
  <header class="header">
    <div class="logo">
      <a href="/">
        <svg width="58" height="58" viewBox="0 0 58 58" fill="none" xmlns="http://www.w3.org/2000/svg">
          <g clip-path="url(#clip0)">
            <path d="M21.79 55.4666L21.7879 35.8915L34.2624 35.8902L34.2644 55.4653L49.8574 55.4637L49.8547 29.3636L59.2105 29.3626L28.0214 0.00312496L-3.16159 29.369L6.19423 29.3681L6.19693 55.4682L21.79 55.4666Z" fill="white"/>
          </g>
          <defs>
            <clipPath id="clip0">
              <rect width="57.6862" height="57.6862" fill="white"/>
            </clipPath>
          </defs>
        </svg>
      </a>
    </div>
  </header>

  <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ -->
  <div class="product-container">
    <div class="product-image">
      <img src="{{.Product.Image}}" alt="{{.Product.Title}}">
    </div>

    <div class="product-content">
      <div class="product-title">{{.Product.Title}}</div>

      <div class="spec-title">–û–ø–∏—Å–∞–Ω–∏–µ</div>
      <div class="product-description">{{.Product.Description}}</div>

      <div class="spec-title">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</div>
      <div class="spec-text">{{.Product.Power}}</div>
    </div>
  </div>
</body>
</html>


DB_HOST=localhost
DB_NAME=Webdb
DB_PORT=5432
DB_USER=Molodtsov
DB_PASS=Mosyjr2020
