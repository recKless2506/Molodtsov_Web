package repository

import (
	"Project/internal/app/ds"
	"fmt"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type Repository struct {
	db *gorm.DB
}

func NewRepository(dsn string) (*Repository, error) {
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %w", err)
	}
	return &Repository{db: db}, nil
}

func (r *Repository) DB() *gorm.DB {
	return r.db
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
func (r *Repository) GetHeaterProducts() ([]ds.HeatersProduct, error) {
	var products []ds.HeatersProduct
	if err := r.db.Where("is_delete = ?", false).Find(&products).Error; err != nil {
		return nil, err
	}
	return products, nil
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
func (r *Repository) GetHeaterProductByID(id uint) (*ds.HeatersProduct, error) {
	var product ds.HeatersProduct
	if err := r.db.Where("id = ? AND is_delete = ?", id, false).First(&product).Error; err != nil {
		return nil, err
	}
	return &product, nil
}

func (r *Repository) GetAllRequests() ([]ds.HeatersProductRequest, error) {
	var requests []ds.HeatersProductRequest
	if err := r.db.Preload("Products.Product").
		Where("status != ?", "—É–¥–∞–ª–µ–Ω"). // üî• —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
		Find(&requests).Error; err != nil {
		return nil, err
	}
	return requests, nil
}

// –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –Ω–∞ "—É–¥–∞–ª–µ–Ω"
func (r *Repository) ClearRequests() error {
	return r.db.Model(&ds.HeatersProductRequest{}).
		Where("status = ?", "—á–µ—Ä–Ω–æ–≤–∏–∫").
		Update("status", "—É–¥–∞–ª–µ–Ω").Error
}
