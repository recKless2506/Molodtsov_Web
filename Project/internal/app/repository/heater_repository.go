package repository

import (
	"Project/internal/app/ds"
	"fmt"
	"log"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type Repository struct {
	db *gorm.DB
}

func NewRepository(dsn string) (*Repository, error) {
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %w", err)
	}
	return &Repository{db: db}, nil
}

func (r *Repository) DB() *gorm.DB {
	return r.db
}

func (r *Repository) GetHeaterProducts() ([]ds.HeaterProduct, error) {
	var products []ds.HeaterProduct
	if err := r.db.Where("is_delete = ?", false).Find(&products).Error; err != nil {
		return nil, err
	}
	return products, nil
}

func (r *Repository) GetHeaterProductByID(id uint) (*ds.HeaterProduct, error) {
	var product ds.HeaterProduct
	if err := r.db.Where("id = ? AND is_delete = ?", id, false).First(&product).Error; err != nil {
		return nil, err
	}
	return &product, nil
}

func (r *Repository) GetAllRequests() ([]ds.HeatersProductRequest, error) {
	var requests []ds.HeatersProductRequest

	err := r.db.
		Preload("RequestHeaters.HeaterProduct"). // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤–Ω—É—Ç—Ä–∏ –∑–∞—è–≤–∫–∏
		Where("status != ?", "—É–¥–∞–ª–µ–Ω").
		Find(&requests).Error

	if err != nil {
		return nil, err
	}
	return requests, nil
}

func (r *Repository) ClearRequests() error {
	return r.db.Model(&ds.HeatersProductRequest{}).
		Where("status = ?", "—á–µ—Ä–Ω–æ–≤–∏–∫").
		Update("status", "—É–¥–∞–ª–µ–Ω").Error
}

func (r *Repository) GetRequestsCount() (int64, error) {
	var count int64
	if err := r.db.Model(&ds.HeatersProductRequest{}).
		Where("status != ?", "—É–¥–∞–ª–µ–Ω").
		Count(&count).Error; err != nil {
		return 0, err
	}
	return count, nil
}

// üî• –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞
func (r *Repository) SearchHeaterProducts(query string) ([]ds.HeaterProduct, error) {
	var products []ds.HeaterProduct
	if err := r.db.Where(
		"is_delete = ? AND (title ILIKE ? OR type ILIKE ? OR description ILIKE ?)",
		false,
		"%"+query+"%",
		"%"+query+"%",
		"%"+query+"%",
	).Find(&products).Error; err != nil {
		return nil, err
	}
	return products, nil
}

func (r *Repository) AddProductToCart(productID uint) error {
	// 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	var product ds.HeaterProduct
	if err := r.db.First(&product, productID).Error; err != nil {
		return fmt.Errorf("—Ç–æ–≤–∞—Ä —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω: %w", productID, err)
	}

	// 2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —Å —Å—Ç–∞—Ç—É—Å–æ–º "—á–µ—Ä–Ω–æ–≤–∏–∫"
	request := ds.HeatersProductRequest{
		Status:             "—á–µ—Ä–Ω–æ–≤–∏–∫",
		CreatorID:          1, // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		PlaceSquare:        0,
		OutsideTemperature: 0,
		InsideTemperature:  0,
		CarrierVolume:      0,
	}

	if err := r.db.Create(&request).Error; err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", err)
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: %w", err)
	}

	log.Println("–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ ID:", request.ID)

	if request.ID == 0 {
		return fmt.Errorf("request.ID = 0 –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
	}

	// 3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å —Ç–æ–≤–∞—Ä–æ–º –≤ request_heaters
	link := ds.RequestHeater{
		HeatersProductRequestID: request.ID,
		HeatersProductID:        productID,
		Area:                    0,
	}

	if err := r.db.Create(&link).Error; err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ request_heaters:", err)
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∫ –∑–∞—è–≤–∫–µ: %w", err)
	}

	log.Println("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:", product.Title)

	return nil
}
