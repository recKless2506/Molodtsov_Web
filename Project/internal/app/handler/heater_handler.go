package handler

import (
	"Project/internal/app/ds"
	"Project/internal/app/repository"
	"log"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

type Handler struct {
	Repository *repository.Repository
}

func NewHandler(r *repository.Repository) *Handler {
	return &Handler{Repository: r}
}

// –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
func (h *Handler) GetCatalog(ctx *gin.Context) {
	products, err := h.Repository.GetHeaterProducts()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", err)
		ctx.String(http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
		return
	}

	ctx.HTML(http.StatusOK, "catalog.html", gin.H{
		"products": products,
	})
}

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä
func (h *Handler) GetHeaterByID(ctx *gin.Context) {
	idParam := ctx.Param("id")
	id, err := strconv.Atoi(idParam)
	if err != nil {
		ctx.String(http.StatusBadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞")
		return
	}

	product, err := h.Repository.GetHeaterProductByID(uint(id))
	if err != nil {
		ctx.String(http.StatusNotFound, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	ctx.HTML(http.StatusOK, "heater.html", gin.H{
		"Product": product,
	})
}

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∑–∞—è–≤–∫–∞–º–∏
func (h *Handler) GetApplications(ctx *gin.Context) {
	requests, err := h.Repository.GetAllRequests()
	if err != nil {
		ctx.String(http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: %v", err)
		return
	}
	ctx.HTML(http.StatusOK, "application.html", gin.H{
		"requests": requests,
	})
}

// –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (POST-–∑–∞–ø—Ä–æ—Å)
func (h *Handler) ClearCart(ctx *gin.Context) {
	if err := h.Repository.DB().
		Model(&ds.HeatersProductRequest{}).
		Where("status = ?", "—á–µ—Ä–Ω–æ–≤–∏–∫").
		Update("status", "—É–¥–∞–ª–µ–Ω").Error; err != nil {
		ctx.String(http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: %v", err)
		return
	}

	// üî• –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ä–∞–∑—É —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫
	ctx.Redirect(http.StatusSeeOther, "/zayavka")
}
